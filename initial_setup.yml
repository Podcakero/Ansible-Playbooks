---
- hosts: all
  tasks:
      - name: Install Zabbix Repo on Debian Servers
        ansible.builtin.apt:
            state: present
            deb: "{{ zabbix_repo_url_debian }}"
        when:
        - ansible_facts['distribution'] == "Debian"

      - name: Install packages on Debian Servers
        ansible.builtin.apt:
            update_cache: yes
            state: latest
            pkg: "{{ packages }}"
        when:
        - ansible_facts['distribution'] == "Debian"
 
      - name: Install Zabbix Repo on Rocky Servers
        ansible.builtin.yum:
            state: latest
            name: "{{ zabbix_repo_url_rocky }}"
        when:
        - ansible_facts['distribution'] == "Rocky"

      - name: Install packages on Rocky Servers
        ansible.builtin.yum:
            state: latest
            name: "{{ packages }}" 
        when:
        - ansible_facts['distribution'] == "Rocky"

      - name: Set SELINUX to Permissive
        ansible.builtin.lineinfile:
            path: /etc/selinux/config
            regexp: '^SELINUX='
            line: SELINUX=permissive
        when:
        - ansible_facts['distribution'] == "Rocky"

      - name: sshd_config - Disable Password Authentication  on root 
        ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            search_string: 'PermitRootLogin'
            line: '#PermitRootLogin prohibit-password'
            firstmatch: true
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: sshd_config - Enable Public Key Authentication
        ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            search_string: 'PubkeyAuthentication'
            line: '#PubkeyAuthentication yes'
            firstmatch: true     
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: sshd_config - Disable Password Authentication
        ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            search_string: 'PasswordAuthentication'
            line: 'PasswordAuthentication no'
            firstmatch: true
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: sshd_config - Disable Empty Passwords
        ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            search_string: 'PermitEmptyPasswords'
            line: '#PermitEmptyPasswords no'
            firstmatch: true
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Ensure Greyson ssh key is in authorized_keys
        ansible.builtin.lineinfile: 
            path: /root/.ssh/authorized_keys
            regexp: 'Greyson Weimer$'
            line: "{{ greyson_ssh_key }}"
            create: true
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Set Zabbix Agent passive server
        ansible.builtin.lineinfile:
            path: /etc/zabbix/zabbix_agent2.conf
            search_string: 'Server='
            line: Server=10.1.3.17
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Set Zabbix Agent active server
        ansible.builtin.lineinfile:
            path: /etc/zabbix/zabbix_agent2.conf
            search_string: 'ServerActive='
            line: ServerActive=10.1.3.17
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Set Zabbix Agent hostname
        ansible.builtin.lineinfile:
            path: /etc/zabbix/zabbix_agent2.conf
            search_string: 'Hostname='
            line: Hostname={{ ansible_facts['fqdn'] }}
        when:
        - ansible_facts['distribution'] != "FreeBSD"
      
      - name: Create cockpit disallowed users file if it doesn't exist
        ansible.builtin.lineinfile:
            path: /etc/cockpit/disallowed-users
            line: '# List of users which are not allowed to login to Cockpit'
            create: true 
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Remove entry of root in cockpit disallowed users
        ansible.builtin.lineinfile:
            path: /etc/cockpit/disallowed-users
            regexp: '^root'
            state: absent
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Create motd file if it does not exist
        ansible.builtin.lineinfile:
            path: /etc/motd
            line: temp
            create: yes
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Remove text in motd file
        ansible.builtin.lineinfile:
            path: /etc/motd
            regexp: '.*'
            state: absent
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Enable cockpit.socket
        ansible.builtin.systemd_service:
            state: started
            enabled: true
            name: cockpit.socket
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Enable zabbix agent
        ansible.builtin.systemd_service:
            state: restarted
            enabled: true
            name: zabbix-agent2.service
        when:
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Disable and Mask firewalld
        ansible.builtin.systemd_service:
            state: stopped
            enabled: false
            masked: true
            name: firewalld.service
        when:
        - ansible_facts['distribution'] == "Rocky"
 
      - name: Enroll TPM into LUKS for Debian Auto-Unlock
        ansible.builtin.command: 
            argv:
              - systemd-cryptenroll 
              - --tpm2-device=auto 
              - --tpm2-pcrs=0
              - --password '{{ encryption_passphrase }}'
              - /dev/sda3 
        when:
        - ansible_facts['distribution'] == "Debian"

      - name: Edit dracut.conf for Debian Auto-Unlock
        ansible.builtin.lineinfile:
            path: /etc/dracut.conf
            line: 'add_dracutmodules+=" tpm2-tss crypt "'
        when:
        - ansible_facts['distribution'] == "Debian"

      - name: Edit Grub config for Debian Auto-Unlock
        ansible.builtin.lineinfile:
            path: /etc/default/grub
            insertafter: '^GRUB_CMDLINE_LINUX="'
            line: 'rd.auto rd.luks=1 '
        when:
        - ansible_facts['distribution'] == "Debian"

      - name: Remove entries in crypttab for Auto-Unlock
        ansible.builtin.lineinfile:
            path: /etc/crypttab
            regexp: '.*'
            state: absent
        when:
        - ansible_facts['distribution'] != "Rocky"

      - name: Enroll TPM into LUKS for Rocky Auto-Unlock
        ansible.builtin.command:
            cmd: "echo \"{{ encryption_passphrase }}\" | clevis luks bind -d -k - /dev/sda3 tpm2 '{\"hash\":\"sha256\",\"key\":\"rsa\"}'"
        when: 
        - ansible_facts['distribution'] == "Rocky" 

      - name: Install clevis-dracut for Rocky Auto-Unlock
        ansible.builtin.yum:
            name: clevis-dracut
            state: latest
        when: 
        - ansible_facts['distribution'] == "Rocky"       

      - name: Force regnerate dracut for Auto-Unlock
        ansible.builtin.command:
            argv: 
            - dracut
            - -fv
            - --regenerate-all
        when: 
        - ansible_facts['distribution'] != "FreeBSD"

      - name: Update grub for Auto-Unlock
        ansible.builtin.command:
            argv: 
            - update-grub
        when: 
        - ansible_facts['distribution'] != "FreeBSD"
